{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the StrangeScout docs \u00b6 What is StrangeScout? \u00b6 StrangeScout is the one-of-a-kind scouting system developed for FRC (FIRST Robotics Competition) teams. FIRST is a multinational organization designed to give students through high school hands on learning experiences in STEAM fields, by providing them with challenging and engaging competitions to construct robots and compete with them. A key element of any FRC event is scouting, where teams will track the capabilities of other team's robots to help determine their play strategy and who they may ally with later in the event. This is where StrangeScout comes in. How it works \u00b6 StrangeScout is built with a unique approach to scouting. While the traditional method involves a checklist or similar method where scouts count individual occurrences of a wide variety of potential events, StrangeScout uses a journaling method. For example, if the current game involves picking up balls and placing them into a box, the scouters will only be presented with a single button: \"pick up a ball\". When the robot they're tracking picks up a ball they click this button. Then, a new dialog will appear presenting them with a list of options where the ball may go, which they will then choose when the robot places the ball in that location. This system allows for precise tracing of robots actions, while maintaining simplicity and ease of usability for the actual scouters. Getting started \u00b6 To setup and begin using StrangeScout, you can follow our Installation Guide . If you'd like to take a look at our code, it can be found at the following locations: Frontend Application Code Backend API Code Build and Deployment Scripts The source files for this documentation can be found here: StrangeScout Docs Source Detailed documentation of the available API endpoints can also be found in this documentation: Authentication Routes","title":"Home"},{"location":"#welcome-to-the-strangescout-docs","text":"","title":"Welcome to the StrangeScout docs"},{"location":"#what-is-strangescout","text":"StrangeScout is the one-of-a-kind scouting system developed for FRC (FIRST Robotics Competition) teams. FIRST is a multinational organization designed to give students through high school hands on learning experiences in STEAM fields, by providing them with challenging and engaging competitions to construct robots and compete with them. A key element of any FRC event is scouting, where teams will track the capabilities of other team's robots to help determine their play strategy and who they may ally with later in the event. This is where StrangeScout comes in.","title":"What is StrangeScout?"},{"location":"#how-it-works","text":"StrangeScout is built with a unique approach to scouting. While the traditional method involves a checklist or similar method where scouts count individual occurrences of a wide variety of potential events, StrangeScout uses a journaling method. For example, if the current game involves picking up balls and placing them into a box, the scouters will only be presented with a single button: \"pick up a ball\". When the robot they're tracking picks up a ball they click this button. Then, a new dialog will appear presenting them with a list of options where the ball may go, which they will then choose when the robot places the ball in that location. This system allows for precise tracing of robots actions, while maintaining simplicity and ease of usability for the actual scouters.","title":"How it works"},{"location":"#getting-started","text":"To setup and begin using StrangeScout, you can follow our Installation Guide . If you'd like to take a look at our code, it can be found at the following locations: Frontend Application Code Backend API Code Build and Deployment Scripts The source files for this documentation can be found here: StrangeScout Docs Source Detailed documentation of the available API endpoints can also be found in this documentation: Authentication Routes","title":"Getting started"},{"location":"installation-guide/","text":"Before you install \u00b6 The following installation guide will document setup with Docker because it's what we at Team 1533 Triple Strange and The Red Alliance use. It's also important to note that StrangeScout is designed to be run behind a reverse proxy, and as such does not have built-in support for HTTPS certificates. We do provide example configurations using the traefik reverse proxy , but you are more than welcome to use your own reverse proxy, or even fork the code and roll in your own support for HTTPS. Dependencies \u00b6 StrangeScout only has two true dependencies: Docker Docker Compose Docker is the program that allows services to be run as individual containers on a host machine, and Docker Compose is a utility that simplifies choreography of multiple docker containers. First, install Docker following the available installation instructions for your distribution of choice, for example on an x86_64 Ubuntu server you would run the following (as root): official instructions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #!/bin/bash # update package lists apt-get update # install packages to add repositories apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg-agent \\ software-properties-common # add the docker GPG key curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - # add the docker x86_64 repository add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $( lsb_release -cs ) \\ stable\" # update package lists apt-get update # install docker packages apt-get install docker-ce docker-ce-cli containerd.io Secondly, install Docker Compose following the available installation instructions for your distribution of choice, for example on a *nix server you would run the following (as root): official instructions 1 2 3 4 5 6 7 #!/bin/bash # save the docker-compose script to the bin curl -L \"https://github.com/docker/compose/releases/download/1.25.0/docker-compose- $( uname -s ) - $( uname -m ) \" -o /usr/local/bin/docker-compose # make it executable chmod +x /usr/local/bin/docker-compose After both dependencies have been installed, ensure the Docker system service has been started and enabled: 1 2 systemctl start docker systemctl enable docker Setting up the reverse proxy \u00b6 Now that all dependencies have been installed we can begin setting up traefik for our reverse proxy. Creating a docker network \u00b6 The first step to setting up traefik is to create a new docker network: 1 docker network create strangescout_main This will allow for containers on the same network to easily communicate with each other. In our case it allows for the StrangeScout server to communicate with the database in its own separate container.","title":"Installation Guide"},{"location":"installation-guide/#before-you-install","text":"The following installation guide will document setup with Docker because it's what we at Team 1533 Triple Strange and The Red Alliance use. It's also important to note that StrangeScout is designed to be run behind a reverse proxy, and as such does not have built-in support for HTTPS certificates. We do provide example configurations using the traefik reverse proxy , but you are more than welcome to use your own reverse proxy, or even fork the code and roll in your own support for HTTPS.","title":"Before you install"},{"location":"installation-guide/#dependencies","text":"StrangeScout only has two true dependencies: Docker Docker Compose Docker is the program that allows services to be run as individual containers on a host machine, and Docker Compose is a utility that simplifies choreography of multiple docker containers. First, install Docker following the available installation instructions for your distribution of choice, for example on an x86_64 Ubuntu server you would run the following (as root): official instructions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #!/bin/bash # update package lists apt-get update # install packages to add repositories apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg-agent \\ software-properties-common # add the docker GPG key curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - # add the docker x86_64 repository add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $( lsb_release -cs ) \\ stable\" # update package lists apt-get update # install docker packages apt-get install docker-ce docker-ce-cli containerd.io Secondly, install Docker Compose following the available installation instructions for your distribution of choice, for example on a *nix server you would run the following (as root): official instructions 1 2 3 4 5 6 7 #!/bin/bash # save the docker-compose script to the bin curl -L \"https://github.com/docker/compose/releases/download/1.25.0/docker-compose- $( uname -s ) - $( uname -m ) \" -o /usr/local/bin/docker-compose # make it executable chmod +x /usr/local/bin/docker-compose After both dependencies have been installed, ensure the Docker system service has been started and enabled: 1 2 systemctl start docker systemctl enable docker","title":"Dependencies"},{"location":"installation-guide/#setting-up-the-reverse-proxy","text":"Now that all dependencies have been installed we can begin setting up traefik for our reverse proxy.","title":"Setting up the reverse proxy"},{"location":"installation-guide/#creating-a-docker-network","text":"The first step to setting up traefik is to create a new docker network: 1 docker network create strangescout_main This will allow for containers on the same network to easily communicate with each other. In our case it allows for the StrangeScout server to communicate with the database in its own separate container.","title":"Creating a docker network"},{"location":"scouter-guide/","text":"","title":"Scouter Guide"},{"location":"strangescout-api/authentication-routes/","text":"These API routes are used for user authentication (creating accounts, logging in, and deleting accounts) Create User \u00b6 Creates a new user account Properties \u00b6 Restricted endpoint?: No URL /api/users Method POST URL Params None Data Params Name Type Required Description Example email string required email of the new user bobjones@mydomain.com password string required password of the new user supersecret code string required 8 character alphanumeric invite code A1b2C3d4 Example Payload \u00b6 1 2 3 4 5 { \"email\" : \"bobjones@mydomain.com\" , \"password\" : \"supersecret\" , \"code\" : \"A1b2C3d4\" } Successful Response \u00b6 Response Code 200 Response Body Name Type Description Example _id string MongoDB object id 507f191e810c19729de860ea email string email of the user bobjones@mydomain.com admin boolean is the user an admin true invite boolean can the user invite new users true token string the user's authorization token (JWT) ... Example: 1 2 3 4 5 6 7 { \"_id\" : \"507f191e810c19729de860ea\" , \"email\" : \"bobjones@mydomain.com\" , \"admin\" : true , \"invite\" : true , \"token\" : \"eyJhbGciOiJIUzI1NiJ9.eyJkYXRhIjp0cnVlfQ.v9y-_MKlFV_Dq4j7cDpyJMwNU6cJbd9bbdMbxwWs-GI\" } Failed Responses \u00b6 Response Code 403 Reason The invite code cannot be used for this email Response Code 409 Reason Username already exists Response Code 422 Reason Email, password, or code is either not given or invalid Response Code 440 Reason The invite code is expired Note expired invite codes are deleted after attempted use, so this response will only appear the first time a code is attempted to be used after it expires Login User \u00b6 Logs in to an account Properties \u00b6 Restricted endpoint?: No URL /api/users/session Method POST URL Params None Data Params Name Type Required Description Example email string required email of the user bobjones@mydomain.com password string required password of the user supersecret Example Payload \u00b6 1 2 3 4 { \"email\" : \"bobjones@mydomain.com\" , \"password\" : \"supersecret\" } Successful Response \u00b6 Response Code 200 Response Body Name Type Description Example _id string MongoDB object id 507f191e810c19729de860ea email string email of the user bobjones@mydomain.com admin boolean is the user an admin true invite boolean can the user invite new users true token string the user's authorization token (JWT) ... Example: 1 2 3 4 5 6 7 { \"_id\" : \"507f191e810c19729de860ea\" , \"email\" : \"bobjones@mydomain.com\" , \"admin\" : true , \"invite\" : true , \"token\" : \"eyJhbGciOiJIUzI1NiJ9.eyJkYXRhIjp0cnVlfQ.v9y-_MKlFV_Dq4j7cDpyJMwNU6cJbd9bbdMbxwWs-GI\" } Failed Responses \u00b6 Response Code 422 Reason Valid email or password not given Response Code 404 Reason User not found Verify User Token \u00b6 Verifies a session token Properties \u00b6 Restricted endpoint?: Yes URL /api/users/session Method GET Headers Authorization : Token <user_token_here> URL Params None Data Params None Successful Response \u00b6 Response Code 200 Response Body Name Type Description Example _id string MongoDB object id 507f191e810c19729de860ea email string email of the user bobjones@mydomain.com admin boolean is the user an admin true invite boolean can the user invite new users true token string the user's authorization token (JWT) ... Example: 1 2 3 4 5 6 7 { \"_id\" : \"507f191e810c19729de860ea\" , \"email\" : \"bobjones@mydomain.com\" , \"admin\" : true , \"invite\" : true , \"token\" : \"eyJhbGciOiJIUzI1NiJ9.eyJkYXRhIjp0cnVlfQ.v9y-_MKlFV_Dq4j7cDpyJMwNU6cJbd9bbdMbxwWs-GI\" } Failed Responses \u00b6 Response Code 404 Reason User not found","title":"Authentication Routes"},{"location":"strangescout-api/authentication-routes/#create-user","text":"Creates a new user account","title":"Create User"},{"location":"strangescout-api/authentication-routes/#properties","text":"Restricted endpoint?: No URL /api/users Method POST URL Params None Data Params Name Type Required Description Example email string required email of the new user bobjones@mydomain.com password string required password of the new user supersecret code string required 8 character alphanumeric invite code A1b2C3d4","title":"Properties"},{"location":"strangescout-api/authentication-routes/#example-payload","text":"1 2 3 4 5 { \"email\" : \"bobjones@mydomain.com\" , \"password\" : \"supersecret\" , \"code\" : \"A1b2C3d4\" }","title":"Example Payload"},{"location":"strangescout-api/authentication-routes/#successful-response","text":"Response Code 200 Response Body Name Type Description Example _id string MongoDB object id 507f191e810c19729de860ea email string email of the user bobjones@mydomain.com admin boolean is the user an admin true invite boolean can the user invite new users true token string the user's authorization token (JWT) ... Example: 1 2 3 4 5 6 7 { \"_id\" : \"507f191e810c19729de860ea\" , \"email\" : \"bobjones@mydomain.com\" , \"admin\" : true , \"invite\" : true , \"token\" : \"eyJhbGciOiJIUzI1NiJ9.eyJkYXRhIjp0cnVlfQ.v9y-_MKlFV_Dq4j7cDpyJMwNU6cJbd9bbdMbxwWs-GI\" }","title":"Successful Response"},{"location":"strangescout-api/authentication-routes/#failed-responses","text":"Response Code 403 Reason The invite code cannot be used for this email Response Code 409 Reason Username already exists Response Code 422 Reason Email, password, or code is either not given or invalid Response Code 440 Reason The invite code is expired Note expired invite codes are deleted after attempted use, so this response will only appear the first time a code is attempted to be used after it expires","title":"Failed Responses"},{"location":"strangescout-api/authentication-routes/#login-user","text":"Logs in to an account","title":"Login User"},{"location":"strangescout-api/authentication-routes/#properties_1","text":"Restricted endpoint?: No URL /api/users/session Method POST URL Params None Data Params Name Type Required Description Example email string required email of the user bobjones@mydomain.com password string required password of the user supersecret","title":"Properties"},{"location":"strangescout-api/authentication-routes/#example-payload_1","text":"1 2 3 4 { \"email\" : \"bobjones@mydomain.com\" , \"password\" : \"supersecret\" }","title":"Example Payload"},{"location":"strangescout-api/authentication-routes/#successful-response_1","text":"Response Code 200 Response Body Name Type Description Example _id string MongoDB object id 507f191e810c19729de860ea email string email of the user bobjones@mydomain.com admin boolean is the user an admin true invite boolean can the user invite new users true token string the user's authorization token (JWT) ... Example: 1 2 3 4 5 6 7 { \"_id\" : \"507f191e810c19729de860ea\" , \"email\" : \"bobjones@mydomain.com\" , \"admin\" : true , \"invite\" : true , \"token\" : \"eyJhbGciOiJIUzI1NiJ9.eyJkYXRhIjp0cnVlfQ.v9y-_MKlFV_Dq4j7cDpyJMwNU6cJbd9bbdMbxwWs-GI\" }","title":"Successful Response"},{"location":"strangescout-api/authentication-routes/#failed-responses_1","text":"Response Code 422 Reason Valid email or password not given Response Code 404 Reason User not found","title":"Failed Responses"},{"location":"strangescout-api/authentication-routes/#verify-user-token","text":"Verifies a session token","title":"Verify User Token"},{"location":"strangescout-api/authentication-routes/#properties_2","text":"Restricted endpoint?: Yes URL /api/users/session Method GET Headers Authorization : Token <user_token_here> URL Params None Data Params None","title":"Properties"},{"location":"strangescout-api/authentication-routes/#successful-response_2","text":"Response Code 200 Response Body Name Type Description Example _id string MongoDB object id 507f191e810c19729de860ea email string email of the user bobjones@mydomain.com admin boolean is the user an admin true invite boolean can the user invite new users true token string the user's authorization token (JWT) ... Example: 1 2 3 4 5 6 7 { \"_id\" : \"507f191e810c19729de860ea\" , \"email\" : \"bobjones@mydomain.com\" , \"admin\" : true , \"invite\" : true , \"token\" : \"eyJhbGciOiJIUzI1NiJ9.eyJkYXRhIjp0cnVlfQ.v9y-_MKlFV_Dq4j7cDpyJMwNU6cJbd9bbdMbxwWs-GI\" }","title":"Successful Response"},{"location":"strangescout-api/authentication-routes/#failed-responses_2","text":"Response Code 404 Reason User not found","title":"Failed Responses"}]}