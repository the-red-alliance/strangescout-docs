{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the StrangeScout docs \u00b6 What is StrangeScout? \u00b6 StrangeScout is the one-of-a-kind scouting system developed for FRC (FIRST Robotics Competition) teams. FIRST is a multinational organization designed to give students through high school hands on learning experiences in STEAM fields, by providing them with challenging and engaging competitions to construct robots and compete with them. A key element of any FRC event is scouting, where teams will track the capabilities of other team's robots to help determine their play strategy and who they may ally with later in the event. This is where StrangeScout comes in. How it works \u00b6 StrangeScout is built with a unique approach to scouting. While the traditional method involves a checklist or similar method where scouts count individual occurrences of a wide variety of potential events, StrangeScout uses a journaling method. For example, if the current game involves picking up balls and placing them into a box, the scouters will only be presented with a single button: \"pick up a ball\". When the robot they're tracking picks up a ball they click this button. Then, a new dialog will appear presenting them with a list of options where the ball may go, which they will then choose when the robot places the ball in that location. This system allows for precise tracing of robots actions, while maintaining simplicity and ease of usability for the actual scouters. Getting started \u00b6 To setup and begin using StrangeScout, you can follow our Installation Guide . If you'd like to take a look at our code, it can be found at the following locations: Frontend Application Code Backend API Code Build and Deployment Scripts The source files for this documentation can be found here: StrangeScout Docs Source Detailed documentation of the available API endpoints can also be found in this documentation: Authentication Routes","title":"Home"},{"location":"#welcome-to-the-strangescout-docs","text":"","title":"Welcome to the StrangeScout docs"},{"location":"#what-is-strangescout","text":"StrangeScout is the one-of-a-kind scouting system developed for FRC (FIRST Robotics Competition) teams. FIRST is a multinational organization designed to give students through high school hands on learning experiences in STEAM fields, by providing them with challenging and engaging competitions to construct robots and compete with them. A key element of any FRC event is scouting, where teams will track the capabilities of other team's robots to help determine their play strategy and who they may ally with later in the event. This is where StrangeScout comes in.","title":"What is StrangeScout?"},{"location":"#how-it-works","text":"StrangeScout is built with a unique approach to scouting. While the traditional method involves a checklist or similar method where scouts count individual occurrences of a wide variety of potential events, StrangeScout uses a journaling method. For example, if the current game involves picking up balls and placing them into a box, the scouters will only be presented with a single button: \"pick up a ball\". When the robot they're tracking picks up a ball they click this button. Then, a new dialog will appear presenting them with a list of options where the ball may go, which they will then choose when the robot places the ball in that location. This system allows for precise tracing of robots actions, while maintaining simplicity and ease of usability for the actual scouters.","title":"How it works"},{"location":"#getting-started","text":"To setup and begin using StrangeScout, you can follow our Installation Guide . If you'd like to take a look at our code, it can be found at the following locations: Frontend Application Code Backend API Code Build and Deployment Scripts The source files for this documentation can be found here: StrangeScout Docs Source Detailed documentation of the available API endpoints can also be found in this documentation: Authentication Routes","title":"Getting started"},{"location":"game-template/","text":"","title":"Game template"},{"location":"installation-guide/","text":"Before you install \u00b6 The following installation guide will document setup with Docker because it's what we at Team 1533 Triple Strange and The Red Alliance use. It's also important to note that StrangeScout is designed to be run behind a reverse proxy, and as such does not have built-in support for HTTPS certificates. We do provide example configurations using the traefik reverse proxy , but you are more than welcome to use your own reverse proxy, or even fork the code and roll in your own support for HTTPS. Dependencies \u00b6 StrangeScout only has two true dependencies: Docker Docker Compose Docker is the program that allows services to be run as individual containers on a host machine, and Docker Compose is a utility that simplifies choreography of multiple docker containers. You will also need to have a domain pointing at the server you're installing StrangeScout on. First, install Docker following the available installation instructions for your distribution of choice, for example on an x86_64 Ubuntu server you would run the following (as root): official instructions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #!/bin/bash # update package lists apt-get update # install packages to add repositories apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg-agent \\ software-properties-common # add the docker GPG key curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - # add the docker x86_64 repository add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $( lsb_release -cs ) \\ stable\" # update package lists apt-get update # install docker packages apt-get install docker-ce docker-ce-cli containerd.io Secondly, install Docker Compose following the available installation instructions for your distribution of choice, for example on a *nix server you would run the following (as root): official instructions 1 2 3 4 5 6 7 #!/bin/bash # save the docker-compose script to the bin curl -L \"https://github.com/docker/compose/releases/download/1.25.0/docker-compose- $( uname -s ) - $( uname -m ) \" -o /usr/local/bin/docker-compose # make it executable chmod +x /usr/local/bin/docker-compose After both dependencies have been installed, ensure the Docker system service has been started and enabled: 1 2 systemctl start docker systemctl enable docker Setting up the reverse proxy \u00b6 Now that all dependencies have been installed we can begin setting up traefik for our reverse proxy. For the sake of organization and due to the way docker-compose names containers, you should make a directory to store the reverse proxy files. Run the following two commands before continuing to setup the reverse proxy: 1 2 mkdir -v reverse-proxy cd reverse-proxy Creating a docker network \u00b6 The first step to setting up traefik is to create a new docker network: 1 docker network create strangescout_main This will allow for containers on the same network to easily communicate with each other. In our case it allows for the StrangeScout server to communicate with the database in its own separate container. Creating the certificate file \u00b6 Any modern website should be served using the HTTPS protocol. This ensures any data sent to or from the users is encrypted and cannot be read by unauthorized persons. Our reverse proxy, traefik, has built in support for HTTPS, and can automatically update certificates for HTTPS using ACME (Automated Certificate Management Environment). To do so, we need somewhere to store these certificates. Create a file with the following command as root: 1 touch acme.json Note In order for traefik to store certificates in this file, it must be owned by root. When creating the file, ensure you're running the command as root or using sudo! In order to work properly, we need to set specific permissions on this file. It must ONLY be readable and writable by root. Update the files permissions with the following command as root: 1 chmod 600 acme.json Note chmod is used to update file attributes. In this case, we're setting the file permissions to 600, which corresponds to R/W for the owner, and no permissions for anyone else. Because the file is owned by root, only root can access the file. If these permissions are not set traefik will not be able to get certificates. Creating the compose file \u00b6 Now that our network and ACME certificate file have been created, we can put together the docker-compose file for the reverse proxy. To start, we need to create our compose file: 1 touch docker-compose.yml Now that we have our compose file, let's start with some basic options: 1 2 3 4 5 6 7 8 9 10 # docker-compose.yml version : '3.3' services : reverse-proxy : image : traefik:v2.0 container_name : reverse-proxy hostname : reverse-proxy restart : always What we're doing here is start off by stating that we're using version 3.3 of the docker-compose syntax. Next we start our list of services, and define a service with the name reverse-proxy . Within the reverse-proxy service we specify that it should use the traefik:v2.0 image from Docker Hub, that the container name should be reverse-proxy , the hostname should be reverse-proxy , and the container should always restart if it fails. Note the hostname key sets friendly names that containers can be accessed by on the docker network we created earlier. While this isn't necessary for the reverse proxy container, it will be useful later when we want to specify the url to access the database at. Next, we'll add some command line options that will be given to traefik when it runs: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # docker-compose.yml version : '3.3' services : reverse-proxy : image : traefik:v2.0 container_name : reverse-proxy hostname : reverse-proxy restart : always command : - --providers.docker - --entrypoints.web.address=:80 - --entrypoints.websecure.address=:443 - --entrypoints.mongodb.address=:27017 - --certificatesresolvers.leresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory - --certificatesresolvers.leresolver.acme.email=<youremail@yourdomain.tld> - --certificatesresolvers.leresolver.acme.storage=/acme.json - --certificatesresolvers.leresolver.acme.tlschallenge=true --providers.docker tells traefik we have services running via docker --entrypoints.web.address=:80 : Sets the port on the entrypoint named web to port 80 --entrypoints.websecure.address=:443 sets the port on the entrypoint named websecure to port 443 --entrypoints.mongodb.address=:27017 sets the port on the entrypoint named mongodb to port 27017 --certificatesresolvers.leresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory sets the URL of the ca server to use for ACME certificates --certificatesresolvers.leresolver.acme.email=<youremail@yourdomain.tld> sets the email used when acquiring certificates --certificatesresolvers.leresolver.acme.storage=/acme.json tells traefik where to store certificates --certificatesresolvers.leresolver.acme.tlschallenge=true tells traefik what method to use to get certificates Note Entrypoints are points where network traffic can enter traefik to be routed. The web entrypoint will be used for unencrypted HTTP traffic (we'll be setting it up to automatically redirect to HTTPS as well), the websecure entrypoint for encrypted HTTPS traffic, and the mongodb entrypoint for direct access to our database. Next we need to open the ports that we defined in our traefik entrypoints: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # docker-compose.yml version : '3.3' services : reverse-proxy : image : traefik:v2.0 container_name : reverse-proxy hostname : reverse-proxy restart : always command : - --providers.docker - --entrypoints.web.address=:80 - --entrypoints.websecure.address=:443 - --entrypoints.mongodb.address=:27017 - --certificatesresolvers.leresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory - --certificatesresolvers.leresolver.acme.email=<youremail@yourdomain.tld> - --certificatesresolvers.leresolver.acme.storage=/acme.json - --certificatesresolvers.leresolver.acme.tlschallenge=true ports : - '80:80' - '443:443' - '27017:27017' Each port definition has two parts, separated by a : colon. The first part describes the port to map to on the host machine, while the second part is the port to bind to within the container. For example, 80:80 means that requests to port 80 on the host machine will route to port 80 within the container. In our case we are routing ports 80, 443, and 27017 on the host machine to those same ports within the traefik container. Note Port definitions can also be more specific, including a specific interface they should listen to. For example, 127.0.0.1:80:80 would only map traffic on port 80 from localhost to the container. The next step is to setup some volumes: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 # docker-compose.yml version : '3.3' services : reverse-proxy : image : traefik:v2.0 container_name : reverse-proxy hostname : reverse-proxy restart : always command : - --providers.docker - --entrypoints.web.address=:80 - --entrypoints.websecure.address=:443 - --entrypoints.mongodb.address=:27017 - --certificatesresolvers.leresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory - --certificatesresolvers.leresolver.acme.email=<youremail@yourdomain.tld> - --certificatesresolvers.leresolver.acme.storage=/acme.json - --certificatesresolvers.leresolver.acme.tlschallenge=true ports : - '80:80' - '443:443' - '27017:27017' volumes : - \"./acme.json:/acme.json\" - \"/var/run/docker.sock:/var/run/docker.sock:ro\" Here we are defining two volumes for the container. \"./acme.json:/acme.json\" mounts our ACME certificate file to /acme.json in the container, which is where we've told traefik to look for it \"/var/run/docker.sock:/var/run/docker.sock:ro\" mounts our host machine's docker socket read-only inside the container Mounting the docker socket in the container allows traefik to find out which containers it needs to connect to and what traffic to route to them. Next we need to set some labels on the container, which will be used to configure some additional features: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 # docker-compose.yml version : '3.3' services : reverse-proxy : image : traefik:v2.0 container_name : reverse-proxy hostname : reverse-proxy restart : always command : - --providers.docker - --entrypoints.web.address=:80 - --entrypoints.websecure.address=:443 - --entrypoints.mongodb.address=:27017 - --certificatesresolvers.leresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory - --certificatesresolvers.leresolver.acme.email=<youremail@yourdomain.tld> - --certificatesresolvers.leresolver.acme.storage=/acme.json - --certificatesresolvers.leresolver.acme.tlschallenge=true ports : - '80:80' - '443:443' - '27017:27017' volumes : - \"./acme.json:/acme.json\" - \"/var/run/docker.sock:/var/run/docker.sock:ro\" labels : - traefik.http.middlewares.compress.compress=true - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https - traefik.http.routers.redirs.rule=hostregexp(`{host:.+}`) - traefik.http.routers.redirs.entrypoints=web - traefik.http.routers.redirs.middlewares=redirect-to-https traefik.http.middlewares.compress.compress=true creates a new traefik middleware called compress that compresses traffic traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https creates a middleware that redirects traffic to HTTPS traefik.http.routers.redirs.rule=hostregexp(`{host:.+}`) creates a router that matches to all domains traefik.http.routers.redirs.entrypoints=web sets the router to listen on the HTTP web entrypoint traefik.http.routers.redirs.middlewares=redirect-to-https enables the HTTPS redirection middleware Essentially, these labels enable compression on web traffic and automatically redirect any HTTP traffic to HTTPS. Finally, we can add our docker network: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 # docker-compose.yml version : '3.3' services : reverse-proxy : image : traefik:v2.0 container_name : reverse-proxy hostname : reverse-proxy restart : always command : - --providers.docker - --entrypoints.web.address=:80 - --entrypoints.websecure.address=:443 - --entrypoints.mongodb.address=:27017 - --certificatesresolvers.leresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory - --certificatesresolvers.leresolver.acme.email=<youremail@yourdomain.tld> - --certificatesresolvers.leresolver.acme.storage=/acme.json - --certificatesresolvers.leresolver.acme.tlschallenge=true ports : - '80:80' - '443:443' - '27017:27017' volumes : - \"./acme.json:/acme.json\" - \"/var/run/docker.sock:/var/run/docker.sock:ro\" labels : - traefik.http.middlewares.compress.compress=true - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https - traefik.http.routers.redirs.rule=hostregexp(`{host:.+}`) - traefik.http.routers.redirs.entrypoints=web - traefik.http.routers.redirs.middlewares=redirect-to-https networks : - strangescout_main networks : strangescout_main : external : true There are two parts to adding the network. First, we tell our reverse-proxy service to attach to the strangescout_main network, then we define the network in the top level of the compose file. Starting the reverse proxy \u00b6 To start the reverse proxy you only need to run one command: 1 docker-compose up -d As long as you're in the same directory as the docker-compose.yml file, it will automatically be read and the service will start up and fork to the background thanks to the -d flag! Setting up the database \u00b6 After we've setup the reverse proxy, we'll need a database to store our scouting data. In the case of StrangeScout we use MongoDB . As with the reverse proxy, we'll once again create a directory to store the database files: 1 2 mkdir -v database cd database We also need persistent storage for the database, so we'll create a directory for that as well: 1 mkdir mongodb_data Creating the compose file \u00b6 To start, we need to create our compose file: 1 touch docker-compose.yml The compose file for the database will start very similarly to that of the reverse proxy: 1 2 3 4 5 6 7 8 9 10 # docker-compose.yml version : '3.3' services : mongodb : image : mongo:4.2.2 container_name : mongodb hostname : mongodb restart : always Next, we need to mount our data directory into the container: 1 2 3 4 5 6 7 8 9 10 11 12 13 # docker-compose.yml version : '3.3' services : mongodb : image : mongo:4.2.2 container_name : mongodb hostname : mongodb restart : always volumes : - \"./mongodb_data:/data/db\" Next we need to setup the root database account: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # docker-compose.yml version : '3.3' services : mongodb : image : mongo:4.2.2 container_name : mongodb hostname : mongodb restart : always volumes : - \"./mongodb_data:/data/db\" environment : MONGO_INITDB_ROOT_USERNAME : root MONGO_INITDB_ROOT_PASSWORD : example-password MONGO_INITDB_ROOT_USERNAME: root sets the database's root account username to root MONGO_INITDB_ROOT_PASSWORD: example-password sets the account password to example-password By convention you'll probably want to leave the username as root. Make sure the password is something secure because this account will have full read/write access to the entire database! Now we need to set some labels to tell our reverse proxy how to route database traffic: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # docker-compose.yml version : '3.3' services : mongodb : image : mongo:4.2.2 container_name : mongodb hostname : mongodb restart : always volumes : - \"./mongodb_data:/data/db\" environment : MONGO_INITDB_ROOT_USERNAME : root MONGO_INITDB_ROOT_PASSWORD : example-password labels : - traefik.tcp.routers.mongodb.entrypoints=mongodb - traefik.tcp.routers.mongodb.rule=HostSNI(`*`) traefik.tcp.routers.mongodb.entrypoints=mongodb tells traefik to put this container on a TCP router with the mongodb entrypoint we setup that allows traffic on MongoDB's port 27017 traefik.tcp.routers.mongodb.rule=HostSNI(`*`) tells traefik to match all domains, which is required for traefik TCP services Finally, we attach the docker network to the container: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # docker-compose.yml version : '3.3' services : mongodb : image : mongo:4.2.2 container_name : mongodb hostname : mongodb restart : always volumes : - \"./mongodb_data:/data/db\" environment : MONGO_INITDB_ROOT_USERNAME : root MONGO_INITDB_ROOT_PASSWORD : example-password labels : - traefik.tcp.routers.mongodb.entrypoints=mongodb - traefik.tcp.routers.mongodb.rule=HostSNI(`*`) networks : - strangescout_main networks : strangescout_main : external : true Starting the database \u00b6 The database will be started with the exact same command as the reverse proxy: 1 docker-compose up -d Building StrangeScout \u00b6 While we do provide prebuilt docker images, you may decide to build StrangeScout yourself. If you want to use prebuilt images you can skip this step. Cloning the repository \u00b6 The first step to build any project is to clone its repository. StrangeScout has separate repositories for the frontend, backend, and deploy scripts. Since we're trying to build the final product, we want to clone the build repository. We also need to make sure we've cloned the submodules: 1 2 3 4 git clone https://github.com/the-red-alliance/strangescout-deploy.git cd strangescout-deploy git submodule sync --recursive git submodule update --init --force --recursive Building the image \u00b6 Thanks to the premade Dockerfile, building the image is as simple as one command: 1 docker image build -t strangescout . Once the command completes, you'll have a docker image tagged strangescout ! Setting up StrangeScout \u00b6 Once again we'll start by creating a self contained directory: 1 2 mkdir -v strangescout cd strangescout Creating the compose file \u00b6 The StrangeScout service itself doesn't require any persistent volumes or other local files, so all we have to do is create a compose file: 1 touch docker-compose.yml And start editing: 1 2 3 4 5 6 7 8 9 10 # docker-compose.yml version : '3.3' services : strangescout : image : theredalliance/strangescout:latest container_name : strangescout hostname : strangescout restart : always We once again start the same way as the database and reverse proxy services. Here we're using the latest prebuilt image, but if you built the image yourself you should put whatever you tagged it as for the image key. A list of prebuilt image tags can be found here: https://hub.docker.com/r/theredalliance/strangescout/tags Next we need to set some environment variables: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # docker-compose.yml version : '3.3' services : strangescout : image : theredalliance/strangescout:latest container_name : strangescout hostname : strangescout restart : always environment : - SECRET=jwt-secret - \"DB_URL=mongodb://root:db-password@mongodb:27017/dbname?authSource=admin\" - DB_DEBUG=true - ADMIN_EMAIL=email@yourdomain.tld - ADMIN_PASSWORD=supersecretpassword - TBA_KEY=xxx SECRET=jwt-secret sets the secret used to encrypt the tokens used for authenticating users. This should be a random string of your choice. \"DB_URL=mongodb://root:db-password@mongodb:27017/dbname?authSource=admin\" sets the URL of the database. root:db-password corresponds to the root username and password we set up earlier. @mongodb:27017 says to go to port 27017 - the default MongoDB port, at hostname mongodb , which is what we set the database container hostname to. dbname is the name of the database within Mongo that your data will be stored in, and can be set to anything you want following the rules set here: https://docs.mongodb.com/manual/reference/limits/#restrictions-on-db-names . ?authSource=admin says to use the admin database to find the user. This should not be changed. DB_DEBUG enables debug logs from the backend (omit completely to disable) ADMIN_EMAIL sets the email address of the default strangescout admin account ADMIN_PASSWORD sets the password for the default admin account TBA_KEY sets the API key for The Blue Alliance integration Next we need to add a template file. StrangeScout uses a YAML file to define the game. Premade templates can be found under Premade Game Templates . To use your template, we need to mount it as a volume: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # docker-compose.yml version : '3.3' services : strangescout : image : theredalliance/strangescout:latest container_name : strangescout hostname : strangescout restart : always environment : - SECRET=jwt-secret - \"DB_URL=mongodb://root:db-password@mongodb:27017/dbname?authSource=admin\" - DB_DEBUG=true - ADMIN_EMAIL=email@yourdomain.tld - ADMIN_PASSWORD=supersecretpassword - TBA_KEY=xxx volumes : - ./template.yml:/template.yml ./template.yml:/template.yml tells docker to mount the file ./template.yml at /template.yml inside the container. Change the first part of the mount to point to your template file. Next we need to set some labels to tell Traefik how to route our container: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # docker-compose.yml version : '3.3' services : strangescout : image : theredalliance/strangescout:latest container_name : strangescout hostname : strangescout restart : always environment : - SECRET=jwt-secret - \"DB_URL=mongodb://root:db-password@mongodb:27017/dbname?authSource=admin\" - DB_DEBUG=true - ADMIN_EMAIL=email@yourdomain.tld - ADMIN_PASSWORD=supersecretpassword - TBA_KEY=xxx volumes : - ./template.yml:/template.yml labels : - traefik.http.routers.strangescout.rule=Host(`<yourdomain.tld>`) - traefik.http.routers.strangescout.entrypoints=websecure - traefik.http.routers.strangescout.tls.certresolver=leresolver - traefik.http.routers.strangescout.middlewares=compress traefik.http.routers.strangescout.rule=Host(`<yourdomain.tld>`) tells traefik what domain to route to StrangeScout. Change <yourdomain.tld> accordingly. traefik.http.routers.strangescout.entrypoints=websecure tells traefik to redirect traffic to HTTPS traefik.http.routers.strangescout.tls.certresolver=leresolver tells traefik to automatically get HTTPS certificates traefik.http.routers.strangescout.middlewares=compress tells traefik to compress traffic The final step is to set the docker network: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 # docker-compose.yml version : '3.3' services : strangescout : image : theredalliance/strangescout:latest container_name : strangescout hostname : strangescout restart : always environment : - SECRET=jwt-secret - \"DB_URL=mongodb://root:db-password@mongodb:27017/dbname?authSource=admin\" - DB_DEBUG=true - ADMIN_EMAIL=email@yourdomain.tld - ADMIN_PASSWORD=supersecretpassword - TBA_KEY=xxx volumes : - ./template.yml:/template.yml labels : - traefik.http.routers.strangescout.rule=Host(`<yourdomain.tld>`) - traefik.http.routers.strangescout.entrypoints=websecure - traefik.http.routers.strangescout.tls.certresolver=leresolver - traefik.http.routers.strangescout.middlewares=compress networks : - strangescout_main networks : strangescout_main : external : true Starting StrangeScout \u00b6 We can now start StrangeScout: 1 docker-compose up -d Setting Up Webhooks \u00b6 StrangeScout supports webhooks from The Blue Alliance API. So set them up, go to your api account on The Blue Alliance, and add a new webhook at url https://<yourdomain.tld>/api/webhook . Follow TBA's guide to set up the webhook. When you send the verification message, the code will be logged to the containers logs, along with the TBA_HMAC header. To finalize setup, add TBA_HMAC as an environment variable in the docker-compose file and set it to the logged TBA-HMAC header, and restart the container.","title":"Installation Guide"},{"location":"installation-guide/#before-you-install","text":"The following installation guide will document setup with Docker because it's what we at Team 1533 Triple Strange and The Red Alliance use. It's also important to note that StrangeScout is designed to be run behind a reverse proxy, and as such does not have built-in support for HTTPS certificates. We do provide example configurations using the traefik reverse proxy , but you are more than welcome to use your own reverse proxy, or even fork the code and roll in your own support for HTTPS.","title":"Before you install"},{"location":"installation-guide/#dependencies","text":"StrangeScout only has two true dependencies: Docker Docker Compose Docker is the program that allows services to be run as individual containers on a host machine, and Docker Compose is a utility that simplifies choreography of multiple docker containers. You will also need to have a domain pointing at the server you're installing StrangeScout on. First, install Docker following the available installation instructions for your distribution of choice, for example on an x86_64 Ubuntu server you would run the following (as root): official instructions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #!/bin/bash # update package lists apt-get update # install packages to add repositories apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg-agent \\ software-properties-common # add the docker GPG key curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - # add the docker x86_64 repository add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $( lsb_release -cs ) \\ stable\" # update package lists apt-get update # install docker packages apt-get install docker-ce docker-ce-cli containerd.io Secondly, install Docker Compose following the available installation instructions for your distribution of choice, for example on a *nix server you would run the following (as root): official instructions 1 2 3 4 5 6 7 #!/bin/bash # save the docker-compose script to the bin curl -L \"https://github.com/docker/compose/releases/download/1.25.0/docker-compose- $( uname -s ) - $( uname -m ) \" -o /usr/local/bin/docker-compose # make it executable chmod +x /usr/local/bin/docker-compose After both dependencies have been installed, ensure the Docker system service has been started and enabled: 1 2 systemctl start docker systemctl enable docker","title":"Dependencies"},{"location":"installation-guide/#setting-up-the-reverse-proxy","text":"Now that all dependencies have been installed we can begin setting up traefik for our reverse proxy. For the sake of organization and due to the way docker-compose names containers, you should make a directory to store the reverse proxy files. Run the following two commands before continuing to setup the reverse proxy: 1 2 mkdir -v reverse-proxy cd reverse-proxy","title":"Setting up the reverse proxy"},{"location":"installation-guide/#creating-a-docker-network","text":"The first step to setting up traefik is to create a new docker network: 1 docker network create strangescout_main This will allow for containers on the same network to easily communicate with each other. In our case it allows for the StrangeScout server to communicate with the database in its own separate container.","title":"Creating a docker network"},{"location":"installation-guide/#creating-the-certificate-file","text":"Any modern website should be served using the HTTPS protocol. This ensures any data sent to or from the users is encrypted and cannot be read by unauthorized persons. Our reverse proxy, traefik, has built in support for HTTPS, and can automatically update certificates for HTTPS using ACME (Automated Certificate Management Environment). To do so, we need somewhere to store these certificates. Create a file with the following command as root: 1 touch acme.json Note In order for traefik to store certificates in this file, it must be owned by root. When creating the file, ensure you're running the command as root or using sudo! In order to work properly, we need to set specific permissions on this file. It must ONLY be readable and writable by root. Update the files permissions with the following command as root: 1 chmod 600 acme.json Note chmod is used to update file attributes. In this case, we're setting the file permissions to 600, which corresponds to R/W for the owner, and no permissions for anyone else. Because the file is owned by root, only root can access the file. If these permissions are not set traefik will not be able to get certificates.","title":"Creating the certificate file"},{"location":"installation-guide/#creating-the-compose-file","text":"Now that our network and ACME certificate file have been created, we can put together the docker-compose file for the reverse proxy. To start, we need to create our compose file: 1 touch docker-compose.yml Now that we have our compose file, let's start with some basic options: 1 2 3 4 5 6 7 8 9 10 # docker-compose.yml version : '3.3' services : reverse-proxy : image : traefik:v2.0 container_name : reverse-proxy hostname : reverse-proxy restart : always What we're doing here is start off by stating that we're using version 3.3 of the docker-compose syntax. Next we start our list of services, and define a service with the name reverse-proxy . Within the reverse-proxy service we specify that it should use the traefik:v2.0 image from Docker Hub, that the container name should be reverse-proxy , the hostname should be reverse-proxy , and the container should always restart if it fails. Note the hostname key sets friendly names that containers can be accessed by on the docker network we created earlier. While this isn't necessary for the reverse proxy container, it will be useful later when we want to specify the url to access the database at. Next, we'll add some command line options that will be given to traefik when it runs: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # docker-compose.yml version : '3.3' services : reverse-proxy : image : traefik:v2.0 container_name : reverse-proxy hostname : reverse-proxy restart : always command : - --providers.docker - --entrypoints.web.address=:80 - --entrypoints.websecure.address=:443 - --entrypoints.mongodb.address=:27017 - --certificatesresolvers.leresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory - --certificatesresolvers.leresolver.acme.email=<youremail@yourdomain.tld> - --certificatesresolvers.leresolver.acme.storage=/acme.json - --certificatesresolvers.leresolver.acme.tlschallenge=true --providers.docker tells traefik we have services running via docker --entrypoints.web.address=:80 : Sets the port on the entrypoint named web to port 80 --entrypoints.websecure.address=:443 sets the port on the entrypoint named websecure to port 443 --entrypoints.mongodb.address=:27017 sets the port on the entrypoint named mongodb to port 27017 --certificatesresolvers.leresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory sets the URL of the ca server to use for ACME certificates --certificatesresolvers.leresolver.acme.email=<youremail@yourdomain.tld> sets the email used when acquiring certificates --certificatesresolvers.leresolver.acme.storage=/acme.json tells traefik where to store certificates --certificatesresolvers.leresolver.acme.tlschallenge=true tells traefik what method to use to get certificates Note Entrypoints are points where network traffic can enter traefik to be routed. The web entrypoint will be used for unencrypted HTTP traffic (we'll be setting it up to automatically redirect to HTTPS as well), the websecure entrypoint for encrypted HTTPS traffic, and the mongodb entrypoint for direct access to our database. Next we need to open the ports that we defined in our traefik entrypoints: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # docker-compose.yml version : '3.3' services : reverse-proxy : image : traefik:v2.0 container_name : reverse-proxy hostname : reverse-proxy restart : always command : - --providers.docker - --entrypoints.web.address=:80 - --entrypoints.websecure.address=:443 - --entrypoints.mongodb.address=:27017 - --certificatesresolvers.leresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory - --certificatesresolvers.leresolver.acme.email=<youremail@yourdomain.tld> - --certificatesresolvers.leresolver.acme.storage=/acme.json - --certificatesresolvers.leresolver.acme.tlschallenge=true ports : - '80:80' - '443:443' - '27017:27017' Each port definition has two parts, separated by a : colon. The first part describes the port to map to on the host machine, while the second part is the port to bind to within the container. For example, 80:80 means that requests to port 80 on the host machine will route to port 80 within the container. In our case we are routing ports 80, 443, and 27017 on the host machine to those same ports within the traefik container. Note Port definitions can also be more specific, including a specific interface they should listen to. For example, 127.0.0.1:80:80 would only map traffic on port 80 from localhost to the container. The next step is to setup some volumes: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 # docker-compose.yml version : '3.3' services : reverse-proxy : image : traefik:v2.0 container_name : reverse-proxy hostname : reverse-proxy restart : always command : - --providers.docker - --entrypoints.web.address=:80 - --entrypoints.websecure.address=:443 - --entrypoints.mongodb.address=:27017 - --certificatesresolvers.leresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory - --certificatesresolvers.leresolver.acme.email=<youremail@yourdomain.tld> - --certificatesresolvers.leresolver.acme.storage=/acme.json - --certificatesresolvers.leresolver.acme.tlschallenge=true ports : - '80:80' - '443:443' - '27017:27017' volumes : - \"./acme.json:/acme.json\" - \"/var/run/docker.sock:/var/run/docker.sock:ro\" Here we are defining two volumes for the container. \"./acme.json:/acme.json\" mounts our ACME certificate file to /acme.json in the container, which is where we've told traefik to look for it \"/var/run/docker.sock:/var/run/docker.sock:ro\" mounts our host machine's docker socket read-only inside the container Mounting the docker socket in the container allows traefik to find out which containers it needs to connect to and what traffic to route to them. Next we need to set some labels on the container, which will be used to configure some additional features: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 # docker-compose.yml version : '3.3' services : reverse-proxy : image : traefik:v2.0 container_name : reverse-proxy hostname : reverse-proxy restart : always command : - --providers.docker - --entrypoints.web.address=:80 - --entrypoints.websecure.address=:443 - --entrypoints.mongodb.address=:27017 - --certificatesresolvers.leresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory - --certificatesresolvers.leresolver.acme.email=<youremail@yourdomain.tld> - --certificatesresolvers.leresolver.acme.storage=/acme.json - --certificatesresolvers.leresolver.acme.tlschallenge=true ports : - '80:80' - '443:443' - '27017:27017' volumes : - \"./acme.json:/acme.json\" - \"/var/run/docker.sock:/var/run/docker.sock:ro\" labels : - traefik.http.middlewares.compress.compress=true - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https - traefik.http.routers.redirs.rule=hostregexp(`{host:.+}`) - traefik.http.routers.redirs.entrypoints=web - traefik.http.routers.redirs.middlewares=redirect-to-https traefik.http.middlewares.compress.compress=true creates a new traefik middleware called compress that compresses traffic traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https creates a middleware that redirects traffic to HTTPS traefik.http.routers.redirs.rule=hostregexp(`{host:.+}`) creates a router that matches to all domains traefik.http.routers.redirs.entrypoints=web sets the router to listen on the HTTP web entrypoint traefik.http.routers.redirs.middlewares=redirect-to-https enables the HTTPS redirection middleware Essentially, these labels enable compression on web traffic and automatically redirect any HTTP traffic to HTTPS. Finally, we can add our docker network: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 # docker-compose.yml version : '3.3' services : reverse-proxy : image : traefik:v2.0 container_name : reverse-proxy hostname : reverse-proxy restart : always command : - --providers.docker - --entrypoints.web.address=:80 - --entrypoints.websecure.address=:443 - --entrypoints.mongodb.address=:27017 - --certificatesresolvers.leresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory - --certificatesresolvers.leresolver.acme.email=<youremail@yourdomain.tld> - --certificatesresolvers.leresolver.acme.storage=/acme.json - --certificatesresolvers.leresolver.acme.tlschallenge=true ports : - '80:80' - '443:443' - '27017:27017' volumes : - \"./acme.json:/acme.json\" - \"/var/run/docker.sock:/var/run/docker.sock:ro\" labels : - traefik.http.middlewares.compress.compress=true - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https - traefik.http.routers.redirs.rule=hostregexp(`{host:.+}`) - traefik.http.routers.redirs.entrypoints=web - traefik.http.routers.redirs.middlewares=redirect-to-https networks : - strangescout_main networks : strangescout_main : external : true There are two parts to adding the network. First, we tell our reverse-proxy service to attach to the strangescout_main network, then we define the network in the top level of the compose file.","title":"Creating the compose file"},{"location":"installation-guide/#starting-the-reverse-proxy","text":"To start the reverse proxy you only need to run one command: 1 docker-compose up -d As long as you're in the same directory as the docker-compose.yml file, it will automatically be read and the service will start up and fork to the background thanks to the -d flag!","title":"Starting the reverse proxy"},{"location":"installation-guide/#setting-up-the-database","text":"After we've setup the reverse proxy, we'll need a database to store our scouting data. In the case of StrangeScout we use MongoDB . As with the reverse proxy, we'll once again create a directory to store the database files: 1 2 mkdir -v database cd database We also need persistent storage for the database, so we'll create a directory for that as well: 1 mkdir mongodb_data","title":"Setting up the database"},{"location":"installation-guide/#creating-the-compose-file_1","text":"To start, we need to create our compose file: 1 touch docker-compose.yml The compose file for the database will start very similarly to that of the reverse proxy: 1 2 3 4 5 6 7 8 9 10 # docker-compose.yml version : '3.3' services : mongodb : image : mongo:4.2.2 container_name : mongodb hostname : mongodb restart : always Next, we need to mount our data directory into the container: 1 2 3 4 5 6 7 8 9 10 11 12 13 # docker-compose.yml version : '3.3' services : mongodb : image : mongo:4.2.2 container_name : mongodb hostname : mongodb restart : always volumes : - \"./mongodb_data:/data/db\" Next we need to setup the root database account: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # docker-compose.yml version : '3.3' services : mongodb : image : mongo:4.2.2 container_name : mongodb hostname : mongodb restart : always volumes : - \"./mongodb_data:/data/db\" environment : MONGO_INITDB_ROOT_USERNAME : root MONGO_INITDB_ROOT_PASSWORD : example-password MONGO_INITDB_ROOT_USERNAME: root sets the database's root account username to root MONGO_INITDB_ROOT_PASSWORD: example-password sets the account password to example-password By convention you'll probably want to leave the username as root. Make sure the password is something secure because this account will have full read/write access to the entire database! Now we need to set some labels to tell our reverse proxy how to route database traffic: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # docker-compose.yml version : '3.3' services : mongodb : image : mongo:4.2.2 container_name : mongodb hostname : mongodb restart : always volumes : - \"./mongodb_data:/data/db\" environment : MONGO_INITDB_ROOT_USERNAME : root MONGO_INITDB_ROOT_PASSWORD : example-password labels : - traefik.tcp.routers.mongodb.entrypoints=mongodb - traefik.tcp.routers.mongodb.rule=HostSNI(`*`) traefik.tcp.routers.mongodb.entrypoints=mongodb tells traefik to put this container on a TCP router with the mongodb entrypoint we setup that allows traffic on MongoDB's port 27017 traefik.tcp.routers.mongodb.rule=HostSNI(`*`) tells traefik to match all domains, which is required for traefik TCP services Finally, we attach the docker network to the container: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # docker-compose.yml version : '3.3' services : mongodb : image : mongo:4.2.2 container_name : mongodb hostname : mongodb restart : always volumes : - \"./mongodb_data:/data/db\" environment : MONGO_INITDB_ROOT_USERNAME : root MONGO_INITDB_ROOT_PASSWORD : example-password labels : - traefik.tcp.routers.mongodb.entrypoints=mongodb - traefik.tcp.routers.mongodb.rule=HostSNI(`*`) networks : - strangescout_main networks : strangescout_main : external : true","title":"Creating the compose file"},{"location":"installation-guide/#starting-the-database","text":"The database will be started with the exact same command as the reverse proxy: 1 docker-compose up -d","title":"Starting the database"},{"location":"installation-guide/#building-strangescout","text":"While we do provide prebuilt docker images, you may decide to build StrangeScout yourself. If you want to use prebuilt images you can skip this step.","title":"Building StrangeScout"},{"location":"installation-guide/#cloning-the-repository","text":"The first step to build any project is to clone its repository. StrangeScout has separate repositories for the frontend, backend, and deploy scripts. Since we're trying to build the final product, we want to clone the build repository. We also need to make sure we've cloned the submodules: 1 2 3 4 git clone https://github.com/the-red-alliance/strangescout-deploy.git cd strangescout-deploy git submodule sync --recursive git submodule update --init --force --recursive","title":"Cloning the repository"},{"location":"installation-guide/#building-the-image","text":"Thanks to the premade Dockerfile, building the image is as simple as one command: 1 docker image build -t strangescout . Once the command completes, you'll have a docker image tagged strangescout !","title":"Building the image"},{"location":"installation-guide/#setting-up-strangescout","text":"Once again we'll start by creating a self contained directory: 1 2 mkdir -v strangescout cd strangescout","title":"Setting up StrangeScout"},{"location":"installation-guide/#creating-the-compose-file_2","text":"The StrangeScout service itself doesn't require any persistent volumes or other local files, so all we have to do is create a compose file: 1 touch docker-compose.yml And start editing: 1 2 3 4 5 6 7 8 9 10 # docker-compose.yml version : '3.3' services : strangescout : image : theredalliance/strangescout:latest container_name : strangescout hostname : strangescout restart : always We once again start the same way as the database and reverse proxy services. Here we're using the latest prebuilt image, but if you built the image yourself you should put whatever you tagged it as for the image key. A list of prebuilt image tags can be found here: https://hub.docker.com/r/theredalliance/strangescout/tags Next we need to set some environment variables: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # docker-compose.yml version : '3.3' services : strangescout : image : theredalliance/strangescout:latest container_name : strangescout hostname : strangescout restart : always environment : - SECRET=jwt-secret - \"DB_URL=mongodb://root:db-password@mongodb:27017/dbname?authSource=admin\" - DB_DEBUG=true - ADMIN_EMAIL=email@yourdomain.tld - ADMIN_PASSWORD=supersecretpassword - TBA_KEY=xxx SECRET=jwt-secret sets the secret used to encrypt the tokens used for authenticating users. This should be a random string of your choice. \"DB_URL=mongodb://root:db-password@mongodb:27017/dbname?authSource=admin\" sets the URL of the database. root:db-password corresponds to the root username and password we set up earlier. @mongodb:27017 says to go to port 27017 - the default MongoDB port, at hostname mongodb , which is what we set the database container hostname to. dbname is the name of the database within Mongo that your data will be stored in, and can be set to anything you want following the rules set here: https://docs.mongodb.com/manual/reference/limits/#restrictions-on-db-names . ?authSource=admin says to use the admin database to find the user. This should not be changed. DB_DEBUG enables debug logs from the backend (omit completely to disable) ADMIN_EMAIL sets the email address of the default strangescout admin account ADMIN_PASSWORD sets the password for the default admin account TBA_KEY sets the API key for The Blue Alliance integration Next we need to add a template file. StrangeScout uses a YAML file to define the game. Premade templates can be found under Premade Game Templates . To use your template, we need to mount it as a volume: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # docker-compose.yml version : '3.3' services : strangescout : image : theredalliance/strangescout:latest container_name : strangescout hostname : strangescout restart : always environment : - SECRET=jwt-secret - \"DB_URL=mongodb://root:db-password@mongodb:27017/dbname?authSource=admin\" - DB_DEBUG=true - ADMIN_EMAIL=email@yourdomain.tld - ADMIN_PASSWORD=supersecretpassword - TBA_KEY=xxx volumes : - ./template.yml:/template.yml ./template.yml:/template.yml tells docker to mount the file ./template.yml at /template.yml inside the container. Change the first part of the mount to point to your template file. Next we need to set some labels to tell Traefik how to route our container: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # docker-compose.yml version : '3.3' services : strangescout : image : theredalliance/strangescout:latest container_name : strangescout hostname : strangescout restart : always environment : - SECRET=jwt-secret - \"DB_URL=mongodb://root:db-password@mongodb:27017/dbname?authSource=admin\" - DB_DEBUG=true - ADMIN_EMAIL=email@yourdomain.tld - ADMIN_PASSWORD=supersecretpassword - TBA_KEY=xxx volumes : - ./template.yml:/template.yml labels : - traefik.http.routers.strangescout.rule=Host(`<yourdomain.tld>`) - traefik.http.routers.strangescout.entrypoints=websecure - traefik.http.routers.strangescout.tls.certresolver=leresolver - traefik.http.routers.strangescout.middlewares=compress traefik.http.routers.strangescout.rule=Host(`<yourdomain.tld>`) tells traefik what domain to route to StrangeScout. Change <yourdomain.tld> accordingly. traefik.http.routers.strangescout.entrypoints=websecure tells traefik to redirect traffic to HTTPS traefik.http.routers.strangescout.tls.certresolver=leresolver tells traefik to automatically get HTTPS certificates traefik.http.routers.strangescout.middlewares=compress tells traefik to compress traffic The final step is to set the docker network: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 # docker-compose.yml version : '3.3' services : strangescout : image : theredalliance/strangescout:latest container_name : strangescout hostname : strangescout restart : always environment : - SECRET=jwt-secret - \"DB_URL=mongodb://root:db-password@mongodb:27017/dbname?authSource=admin\" - DB_DEBUG=true - ADMIN_EMAIL=email@yourdomain.tld - ADMIN_PASSWORD=supersecretpassword - TBA_KEY=xxx volumes : - ./template.yml:/template.yml labels : - traefik.http.routers.strangescout.rule=Host(`<yourdomain.tld>`) - traefik.http.routers.strangescout.entrypoints=websecure - traefik.http.routers.strangescout.tls.certresolver=leresolver - traefik.http.routers.strangescout.middlewares=compress networks : - strangescout_main networks : strangescout_main : external : true","title":"Creating the compose file"},{"location":"installation-guide/#starting-strangescout","text":"We can now start StrangeScout: 1 docker-compose up -d","title":"Starting StrangeScout"},{"location":"installation-guide/#setting-up-webhooks","text":"StrangeScout supports webhooks from The Blue Alliance API. So set them up, go to your api account on The Blue Alliance, and add a new webhook at url https://<yourdomain.tld>/api/webhook . Follow TBA's guide to set up the webhook. When you send the verification message, the code will be logged to the containers logs, along with the TBA_HMAC header. To finalize setup, add TBA_HMAC as an environment variable in the docker-compose file and set it to the logged TBA-HMAC header, and restart the container.","title":"Setting Up Webhooks"},{"location":"premade-templates/","text":"2020 Infinite Recharge \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 --- gameInfo : # general game info name : \"2020 FIRST Infinite Recharge\" # game name program : FRC # game program (frc/ftc) year : 2020 # game year duration : 150 # game duration events : - 2020ncpem - 2020ncgui positions : # possible starting positions - display : Left # position display name key : left # position key - display : Middle key : middle - display : Right key : right loadouts : # robot starting loadouts - display : \"Power Cell\" # loadout display name events : # list of events loadout triggers - get_cell - display : \"2 Power Cells\" events : - get_cell - get_cell - display : \"3 Power Cells\" events : - get_cell - get_cell - get_cell scout : # scouting template data run : # list of game elements for scouting a run - type : multi_item # element type activeTime : 0 # T+ time to activate the element display : \"Power Cells\" # element display name (multi item) analysisDisplay : \"Power Cells\" key : \"power_cells\" # element key (multi item) max : 5 # max to be held (multi item) get : # get event (multi item) display : \"Get Power Cell\" # get event display name (multi item) key : get_cell # get event key (multi item) endDisable : true # disable at end of match children : # event children (destinations) - display : \"Upper Power Ports\" key : upper_cell - display : \"Lower Power Port\" key : lower_cell - display : \"Dropped Cell\" key : drop_cell - type : single_item # single item activeTime : 0 canHold : false # can't hold ignoreHold : true # doable when holding endDisable : true # disables at the end display : \"Start Control Panel\" analysisDisplay : \"Control Panel\" key : start_panel children : - display : \"Successful Spin\" key : successful_panel - display : \"Failed Spin\" key : failed_panel - type : single_item # single item activeTime : 120 # activates at T+120 / T-30 canHold : false # can't hold ignoreHold : true # doable while holding endDisable : false # doesn't disable at the end singleUse : true # can only occur once display : \"Start Hang\" analysisDisplay : \"Hang\" key : start_hang children : - display : \"Successful Hang\" key : successful_hang - display : \"Failed Hang\" key : failed_hang - display : \"Parked\" key : park_hang - type : duration # duration element activeTime : 0 key : defense startDisplay : \"Start Defending\" startKey : start_defend endDisplay : \"Stop Defending\" endKey : end_defend analysisDisplay : \"Defense\" ignoreHold : true endDisable : true pit : - type : number name : Ground Clearance (inches) key : ground_clearance required : true - type : boolean name : Control Panel Clearance key : control_panel - type : select name : Drivetrain key : drivetrain options : - name : Kit Bot key : kit_bot - name : Swerve key : swerve - name : West Coast key : west_coast - name : Mecanum key : mecanum - name : All Omni key : all_omni - name : Pneumatic key : pneumatic - name : Eight Wheel key : eight_wheel - name : Treads key : treads - name : Other (in notes) key : other required : true","title":"Premade Game Templates"},{"location":"premade-templates/#2020-infinite-recharge","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 --- gameInfo : # general game info name : \"2020 FIRST Infinite Recharge\" # game name program : FRC # game program (frc/ftc) year : 2020 # game year duration : 150 # game duration events : - 2020ncpem - 2020ncgui positions : # possible starting positions - display : Left # position display name key : left # position key - display : Middle key : middle - display : Right key : right loadouts : # robot starting loadouts - display : \"Power Cell\" # loadout display name events : # list of events loadout triggers - get_cell - display : \"2 Power Cells\" events : - get_cell - get_cell - display : \"3 Power Cells\" events : - get_cell - get_cell - get_cell scout : # scouting template data run : # list of game elements for scouting a run - type : multi_item # element type activeTime : 0 # T+ time to activate the element display : \"Power Cells\" # element display name (multi item) analysisDisplay : \"Power Cells\" key : \"power_cells\" # element key (multi item) max : 5 # max to be held (multi item) get : # get event (multi item) display : \"Get Power Cell\" # get event display name (multi item) key : get_cell # get event key (multi item) endDisable : true # disable at end of match children : # event children (destinations) - display : \"Upper Power Ports\" key : upper_cell - display : \"Lower Power Port\" key : lower_cell - display : \"Dropped Cell\" key : drop_cell - type : single_item # single item activeTime : 0 canHold : false # can't hold ignoreHold : true # doable when holding endDisable : true # disables at the end display : \"Start Control Panel\" analysisDisplay : \"Control Panel\" key : start_panel children : - display : \"Successful Spin\" key : successful_panel - display : \"Failed Spin\" key : failed_panel - type : single_item # single item activeTime : 120 # activates at T+120 / T-30 canHold : false # can't hold ignoreHold : true # doable while holding endDisable : false # doesn't disable at the end singleUse : true # can only occur once display : \"Start Hang\" analysisDisplay : \"Hang\" key : start_hang children : - display : \"Successful Hang\" key : successful_hang - display : \"Failed Hang\" key : failed_hang - display : \"Parked\" key : park_hang - type : duration # duration element activeTime : 0 key : defense startDisplay : \"Start Defending\" startKey : start_defend endDisplay : \"Stop Defending\" endKey : end_defend analysisDisplay : \"Defense\" ignoreHold : true endDisable : true pit : - type : number name : Ground Clearance (inches) key : ground_clearance required : true - type : boolean name : Control Panel Clearance key : control_panel - type : select name : Drivetrain key : drivetrain options : - name : Kit Bot key : kit_bot - name : Swerve key : swerve - name : West Coast key : west_coast - name : Mecanum key : mecanum - name : All Omni key : all_omni - name : Pneumatic key : pneumatic - name : Eight Wheel key : eight_wheel - name : Treads key : treads - name : Other (in notes) key : other required : true","title":"2020 Infinite Recharge"},{"location":"scouter-guide/","text":"","title":"Scouter Guide"},{"location":"strangescout-api/authentication-routes/","text":"These API routes are used for user authentication (creating accounts, logging in, and deleting accounts) Create User \u00b6 Creates a new user account Properties \u00b6 Restricted endpoint?: No URL /api/users Method POST URL Params None Data Params Name Type Required Description Example email string required email of the new user bobjones@mydomain.com password string required password of the new user supersecret code string required 8 character alphanumeric invite code A1b2C3d4 Example Payload \u00b6 1 2 3 4 5 { \"email\" : \"bobjones@mydomain.com\" , \"password\" : \"supersecret\" , \"code\" : \"A1b2C3d4\" } Successful Response \u00b6 Response Code 200 Response Body Name Type Description Example _id string MongoDB object id 507f191e810c19729de860ea email string email of the user bobjones@mydomain.com admin boolean is the user an admin true invite boolean can the user invite new users true token string the user's authorization token (JWT) ... Example: 1 2 3 4 5 6 7 { \"_id\" : \"507f191e810c19729de860ea\" , \"email\" : \"bobjones@mydomain.com\" , \"admin\" : true , \"invite\" : true , \"token\" : \"eyJhbGciOiJIUzI1NiJ9.eyJkYXRhIjp0cnVlfQ.v9y-_MKlFV_Dq4j7cDpyJMwNU6cJbd9bbdMbxwWs-GI\" } Failed Responses \u00b6 Response Code 403 Reason The invite code cannot be used for this email Response Code 409 Reason Username already exists Response Code 422 Reason Email, password, or code is either not given or invalid Response Code 440 Reason The invite code is expired Note expired invite codes are deleted after attempted use, so this response will only appear the first time a code is attempted to be used after it expires Login User \u00b6 Logs in to an account Properties \u00b6 Restricted endpoint?: No URL /api/users/session Method POST URL Params None Data Params Name Type Required Description Example email string required email of the user bobjones@mydomain.com password string required password of the user supersecret Example Payload \u00b6 1 2 3 4 { \"email\" : \"bobjones@mydomain.com\" , \"password\" : \"supersecret\" } Successful Response \u00b6 Response Code 200 Response Body Name Type Description Example _id string MongoDB object id 507f191e810c19729de860ea email string email of the user bobjones@mydomain.com admin boolean is the user an admin true invite boolean can the user invite new users true token string the user's authorization token (JWT) ... Example: 1 2 3 4 5 6 7 { \"_id\" : \"507f191e810c19729de860ea\" , \"email\" : \"bobjones@mydomain.com\" , \"admin\" : true , \"invite\" : true , \"token\" : \"eyJhbGciOiJIUzI1NiJ9.eyJkYXRhIjp0cnVlfQ.v9y-_MKlFV_Dq4j7cDpyJMwNU6cJbd9bbdMbxwWs-GI\" } Failed Responses \u00b6 Response Code 422 Reason Valid email or password not given Response Code 404 Reason User not found Verify User Token \u00b6 Verifies a session token Properties \u00b6 Restricted endpoint?: Yes URL /api/users/session Method GET Headers Authorization : Token <user_token_here> URL Params None Data Params None Successful Response \u00b6 Response Code 200 Response Body Name Type Description Example _id string MongoDB object id 507f191e810c19729de860ea email string email of the user bobjones@mydomain.com admin boolean is the user an admin true invite boolean can the user invite new users true token string the user's authorization token (JWT) ... Example: 1 2 3 4 5 6 7 { \"_id\" : \"507f191e810c19729de860ea\" , \"email\" : \"bobjones@mydomain.com\" , \"admin\" : true , \"invite\" : true , \"token\" : \"eyJhbGciOiJIUzI1NiJ9.eyJkYXRhIjp0cnVlfQ.v9y-_MKlFV_Dq4j7cDpyJMwNU6cJbd9bbdMbxwWs-GI\" } Failed Responses \u00b6 Response Code 404 Reason User not found","title":"Authentication Routes"},{"location":"strangescout-api/authentication-routes/#create-user","text":"Creates a new user account","title":"Create User"},{"location":"strangescout-api/authentication-routes/#properties","text":"Restricted endpoint?: No URL /api/users Method POST URL Params None Data Params Name Type Required Description Example email string required email of the new user bobjones@mydomain.com password string required password of the new user supersecret code string required 8 character alphanumeric invite code A1b2C3d4","title":"Properties"},{"location":"strangescout-api/authentication-routes/#example-payload","text":"1 2 3 4 5 { \"email\" : \"bobjones@mydomain.com\" , \"password\" : \"supersecret\" , \"code\" : \"A1b2C3d4\" }","title":"Example Payload"},{"location":"strangescout-api/authentication-routes/#successful-response","text":"Response Code 200 Response Body Name Type Description Example _id string MongoDB object id 507f191e810c19729de860ea email string email of the user bobjones@mydomain.com admin boolean is the user an admin true invite boolean can the user invite new users true token string the user's authorization token (JWT) ... Example: 1 2 3 4 5 6 7 { \"_id\" : \"507f191e810c19729de860ea\" , \"email\" : \"bobjones@mydomain.com\" , \"admin\" : true , \"invite\" : true , \"token\" : \"eyJhbGciOiJIUzI1NiJ9.eyJkYXRhIjp0cnVlfQ.v9y-_MKlFV_Dq4j7cDpyJMwNU6cJbd9bbdMbxwWs-GI\" }","title":"Successful Response"},{"location":"strangescout-api/authentication-routes/#failed-responses","text":"Response Code 403 Reason The invite code cannot be used for this email Response Code 409 Reason Username already exists Response Code 422 Reason Email, password, or code is either not given or invalid Response Code 440 Reason The invite code is expired Note expired invite codes are deleted after attempted use, so this response will only appear the first time a code is attempted to be used after it expires","title":"Failed Responses"},{"location":"strangescout-api/authentication-routes/#login-user","text":"Logs in to an account","title":"Login User"},{"location":"strangescout-api/authentication-routes/#properties_1","text":"Restricted endpoint?: No URL /api/users/session Method POST URL Params None Data Params Name Type Required Description Example email string required email of the user bobjones@mydomain.com password string required password of the user supersecret","title":"Properties"},{"location":"strangescout-api/authentication-routes/#example-payload_1","text":"1 2 3 4 { \"email\" : \"bobjones@mydomain.com\" , \"password\" : \"supersecret\" }","title":"Example Payload"},{"location":"strangescout-api/authentication-routes/#successful-response_1","text":"Response Code 200 Response Body Name Type Description Example _id string MongoDB object id 507f191e810c19729de860ea email string email of the user bobjones@mydomain.com admin boolean is the user an admin true invite boolean can the user invite new users true token string the user's authorization token (JWT) ... Example: 1 2 3 4 5 6 7 { \"_id\" : \"507f191e810c19729de860ea\" , \"email\" : \"bobjones@mydomain.com\" , \"admin\" : true , \"invite\" : true , \"token\" : \"eyJhbGciOiJIUzI1NiJ9.eyJkYXRhIjp0cnVlfQ.v9y-_MKlFV_Dq4j7cDpyJMwNU6cJbd9bbdMbxwWs-GI\" }","title":"Successful Response"},{"location":"strangescout-api/authentication-routes/#failed-responses_1","text":"Response Code 422 Reason Valid email or password not given Response Code 404 Reason User not found","title":"Failed Responses"},{"location":"strangescout-api/authentication-routes/#verify-user-token","text":"Verifies a session token","title":"Verify User Token"},{"location":"strangescout-api/authentication-routes/#properties_2","text":"Restricted endpoint?: Yes URL /api/users/session Method GET Headers Authorization : Token <user_token_here> URL Params None Data Params None","title":"Properties"},{"location":"strangescout-api/authentication-routes/#successful-response_2","text":"Response Code 200 Response Body Name Type Description Example _id string MongoDB object id 507f191e810c19729de860ea email string email of the user bobjones@mydomain.com admin boolean is the user an admin true invite boolean can the user invite new users true token string the user's authorization token (JWT) ... Example: 1 2 3 4 5 6 7 { \"_id\" : \"507f191e810c19729de860ea\" , \"email\" : \"bobjones@mydomain.com\" , \"admin\" : true , \"invite\" : true , \"token\" : \"eyJhbGciOiJIUzI1NiJ9.eyJkYXRhIjp0cnVlfQ.v9y-_MKlFV_Dq4j7cDpyJMwNU6cJbd9bbdMbxwWs-GI\" }","title":"Successful Response"},{"location":"strangescout-api/authentication-routes/#failed-responses_2","text":"Response Code 404 Reason User not found","title":"Failed Responses"}]}